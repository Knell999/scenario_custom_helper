version: '3.8'

services:
  fastapi:
    build: 
      context: .
      target: production  # 멀티스테이지 빌드 타겟 지정
    container_name: story-edit-api
    ports:
      - "8000:8000"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PYTHONPATH=/app
      - UVICORN_LOOP=asyncio
      - UVICORN_LOG_LEVEL=info
      - ASYNC_SUPPORT=true
    volumes:
      - ./saved_stories:/app/saved_stories
      - ./logs:/app/logs  # 로그 볼륨 추가
    restart: unless-stopped
    command: ["fastapi"]
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8000/health && curl -f http://localhost:8000/async-status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # 리소스 제한 추가
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  streamlit:
    build: 
      context: .
      target: production
    container_name: story-edit-web
    ports:
      - "8501:8501"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    volumes:
      - ./saved_stories:/app/saved_stories
      - ./logs:/app/logs
    restart: unless-stopped
    command: ["streamlit"]
    depends_on:
      fastapi:
        condition: service_healthy
    # 리소스 제한
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # FastAPI만 별도로 실행하고 싶은 경우
  fastapi-only:
    build: 
      context: .
      target: production
    container_name: story-chatbot-api-only
    ports:
      - "8000:8000"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PYTHONPATH=/app
      - UVICORN_LOOP=asyncio
      - UVICORN_LOG_LEVEL=info
      - ASYNC_SUPPORT=true
    volumes:
      - ./saved_stories:/app/saved_stories
      - ./logs:/app/logs
    command: ["fastapi"]
    restart: unless-stopped
    profiles:
      - api-only  # docker-compose --profile api-only up으로 실행
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8000/health && curl -f http://localhost:8000/async-status"]
      interval: 30s
      timeout: 10s
      retries: 3

# 네트워크 설정 (필요한 경우)
networks:
  default:
    name: story-chatbot-network

# 볼륨 설정 (영속적 데이터 저장이 필요한 경우)
volumes:
  story_data:
    driver: local
  logs_data:
    driver: local
